import torch
import torch.nn as nn
import requests
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Check if GPU is available, otherwise use CPU
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Define the LSTM class
class LSTM(nn.Module):
    def __init__(self, input_size, hidden_size, num_layers, output_size):
        super(LSTM, self).__init__()
        self.hidden_size = hidden_size
        self.num_layers = num_layers
        self.lstm = nn.LSTM(input_size, hidden_size, num_layers, batch_first=True)
        self.fc = nn.Linear(hidden_size, output_size)

    def forward(self, x):
        h0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size).to(device)
        c0 = torch.zeros(self.num_layers, x.size(0), self.hidden_size).to(device)
        out, _ = self.lstm(x, (h0, c0))
        out = self.fc(out[:, -1, :])
        return out

# Function to fetch Bitcoin price data and other features from XT.com API
def fetch_bitcoin_data(api_key):
    url = f'https://sapi.xt.com/v4/public/kline?symbol=btc_usdt&interval=1d&limit=30&api_key={api_key}'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if 'result' in data and isinstance(data['result'], list):
            kline_data = data['result']
            bitcoin_data = []
            for entry in kline_data:
                timestamp = entry['t']
                open_price = entry['o']
                high_price = entry['h']
                low_price = entry['l']
                close_price = entry['c']
                volume = entry['v']
                bitcoin_data.append([timestamp, open_price, high_price, low_price, close_price, volume])
            # Convert the list of lists into a DataFrame
            bitcoin_df = pd.DataFrame(bitcoin_data, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            return bitcoin_df
        else:
            print("Data format error")
            return None
    else:
        print("Failed to fetch data:", response.status_code)
        return None

# Function to preprocess data
def preprocess_data(bitcoin_data):
    # Handle missing values, if any (not implemented in this example)
    # Normalize the data
    scaler = StandardScaler()
    scaled_data = scaler.fit_transform(bitcoin_data[['open', 'high', 'low', 'close', 'volume']])
    return scaled_data, scaler

# Function to split data into train and test sets
def split_data(data):
    X = data[:, 1:-1]  # Features (all columns except the first and last one)
    y = data[:, -1]   # Target variable (last column)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    return X_train, X_test, y_train, y_test

# Function to train the model
def train_model(model, X_train, y_train, epochs=100, lr=0.001):
    criterion = nn.MSELoss()
    optimizer = torch.optim.Adam(model.parameters(), lr=lr)
    for epoch in range(epochs):
        inputs = torch.tensor(X_train, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
        targets = torch.tensor(y_train, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs.squeeze(), targets.squeeze())
        loss.backward()
        optimizer.step()
        if (epoch+1) % 10 == 0:
            print(f'Epoch [{epoch+1}/{epochs}], Loss: {loss.item():.4f}')

# Function to evaluate the model
def evaluate_model(model, X_test, y_test):
    inputs = torch.tensor(X_test, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
    targets = torch.tensor(y_test, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
    with torch.no_grad():
        outputs = model(inputs)
        mse = mean_squared_error(targets.cpu().numpy(), outputs.squeeze().cpu().numpy())
    print(f'Mean Squared Error (MSE) on Test Set: {mse:.4f}')

# Function to implement trading strategy
def trading_strategy(model, scaled_data, scaler):
    inputs = torch.tensor(scaled_data, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
    with torch.no_grad():
        outputs = model(inputs)
    # Implement your trading strategy based on model predictions
    # For demonstration, let's plot the predictions
    unscaled_outputs = scaler.inverse_transform(outputs.squeeze().cpu().numpy())
    plt.plot(unscaled_outputs, label='Predictions')
    plt.xlabel('Time')
    plt.ylabel('Bitcoin Price')
    plt.title('Bitcoin Price Predictions')
    plt.legend()
    plt.show()

# Function to backtest the trading strategy
def backtest_trading_strategy(model, scaled_data, scaler):
    inputs = torch.tensor(scaled_data, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
    with torch.no_grad():
        outputs = model(inputs)
    # For demonstration, let's calculate the cumulative returns of the trading strategy
    unscaled_outputs = scaler.inverse_transform(outputs.squeeze().cpu().numpy())
    returns = np.diff(unscaled_outputs.squeeze(), prepend=0) / unscaled_outputs[:-1] * 100
    cumulative_returns = np.cumsum(returns)
    plt.plot(cumulative_returns, label='Cumulative Returns')
    plt.xlabel('Time')
    plt.ylabel('Cumulative Returns (%)')
    plt.title('Backtesting Trading Strategy')
    plt.legend()
    plt.show()

# Function to manage risk
def risk_management(model, scaled_data, scaler):
    inputs = torch.tensor(scaled_data, dtype=torch.float32).unsqueeze(0).to(device)  # Add batch dimension
    with torch.no_grad():
        outputs = model(inputs)
    # For demonstration, let's calculate the volatility of the predictions
    unscaled_outputs = scaler.inverse_transform(outputs.squeeze().cpu().numpy())
   
